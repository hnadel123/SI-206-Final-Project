# Weathering the Wait Time Project
# SI 206 Final Project
# Authors: Nadia Reddin, Hannah Nadel


import requests
import time
import sqlite3
from datetime import datetime
import matplotlib.pyplot as plt
import hannah
import Nadia

DB_NAME = "weathering_the_wait_time.db"
print(DB_NAME)




def create_tables():
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    cur.execute('''CREATE TABLE IF NOT EXISTS DisneyParks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    country INTEGER,
    continent TEXT,
    latitude REAL,
    longitude REAL,
    timezone TEXT,
    api_id INTEGER UNIQUE
    )''')

    cur.execute('''
    CREATE TABLE IF NOT EXISTS DisneyRides (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE, 
    park_id INTEGER,
    status TEXT, 
    wait_time REAL,
    time_accessed DATETIME,
    FOREIGN KEY (park_id) REFERENCES DisneyParks(id)
    )
    ''')

    cur.execute('''CREATE TABLE IF NOT EXISTS Weather (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    latitude REAL,
    longitude REAL,
    temperature REAL,
    precipitation REAL,
    rain REAL,
    cloud_cover REAL,
    time_accessed DATETIME
    )''')
 
    conn.commit()
    conn.close()

    
def plot_wait_times_vs_temperature():
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    cur.execute('''
    SELECT Weather.temperature, DisneyRides.wait_time
    FROM Weather
    JOIN DisneyParks ON Weather.latitude = DisneyParks.latitude
    JOIN DisneyRides ON DisneyRides.park_id = DisneyParks.id
    WHERE DisneyParks.name = "Disneyland Park Paris"
''')
    results = cur.fetchall()
    conn.close()
    

    temps = [row[0] for row in results]
    waits = [row[1] for row in results]

    plt.figure()
    plt.scatter(temps, waits, alpha = 0.5)
    plt.xlabel("Temperature (°C)")
    plt.ylabel("Wait Time (minutes)")
    plt.title("Disneyland Ride Wait Times vs. Temperature")
    plt.grid(True)
    plt.savefig("Wait Time vs Temp at Disneyland Park Paris.png")

def plot_wait_times_vs_temperature2():
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    cur.execute('''
    SELECT Weather.temperature, DisneyRides.wait_time
    FROM Weather
    JOIN DisneyParks ON Weather.latitude = DisneyParks.latitude
    JOIN DisneyRides ON DisneyRides.park_id = DisneyParks.id
    WHERE DisneyParks.name = "Disneyland"
''')
    results = cur.fetchall()
    conn.close()
    

    temps = [row[0] for row in results]
    waits = [row[1] for row in results]

    plt.figure()
    plt.scatter(temps, waits, alpha = 0.5)
    plt.xlabel("Temperature (°C)")
    plt.ylabel("Wait Time (minutes)")
    plt.title("Disneyland Ride Wait Times vs. Temperature")
    plt.grid(True)
    plt.savefig("Wait Time vs Temp at Disneyland.png")

def plot_wait_times_vs_temperature3():
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    cur.execute('''
    SELECT Weather.temperature, DisneyRides.wait_time
    FROM Weather
    JOIN DisneyParks ON Weather.latitude = DisneyParks.latitude
    JOIN DisneyRides ON DisneyRides.park_id = DisneyParks.id
    WHERE DisneyParks.name = "Disneyland Hong Kong"
''')
    results = cur.fetchall()
    conn.close()
    

    temps = [row[0] for row in results]
    waits = [row[1] for row in results]

    plt.figure()
    plt.scatter(temps, waits, alpha = 0.5)
    plt.xlabel("Temperature (°C)")
    plt.ylabel("Wait Time (minutes)")
    plt.title("Disneyland Ride Wait Times vs. Temperature")
    plt.grid(True)
    plt.savefig("Wait Time vs Temp at Disneyland3.png")




def test():
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    cur.execute('''
        SELECT p.name, AVG(r.wait_time), wx.temperature
        FROM DisneyParks p
        JOIN DisneyRides r ON r.park_id = p.id
        JOIN Weather wx ON wx.latitude = p.latitude
                         AND wx.longitude = p.longitude
                         AND wx.time_accessed = r.time_accessed
        WHERE wx.temperature < 30
        GROUP BY p.name, wx.temperature
    ''')

    results = cur.fetchall()
    conn.close()

    print("Average Wait Time per Park when Temperature < 30°C:")
    for row in results:
        print(f"Park: {row[0]} | Avg Wait Time: {row[1]:.2f} min | Temp: {row[2]}°C")

    write_results_to_csv(results)


import csv

def write_results_to_csv(results):
    with open("park_wait_summary.csv", "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(["Park Name", "Average Wait Time (min)", "Temperature (°C)"])
        for row in results:
            writer.writerow([row[0], f"{row[1]:.2f}", row[2]])


def main():
    create_tables()
    timestamp = time.strftime('%Y-%m-%d %H:00:00')
    Nadia.fetch_disneyland_data(timestamp)
    hannah.fetch_weather_data(timestamp)
    test()
    plot_wait_times_vs_temperature() 
    plot_wait_times_vs_temperature2()
    plot_wait_times_vs_temperature3()


if __name__ == '__main__':
    main()
